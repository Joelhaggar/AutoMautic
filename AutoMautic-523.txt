#!/bin/bash
banner() {
cat <<EOF

   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-----o----->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



                _         _        __  __             _   _
               / \  _   _| |_ ___ |  \/  | __ _ _   _| |_(_) ___
              / _ \| | | | __/ _ \| |\/| |/ _` | | | | __| |/ __|
             / ___ \ |_| | || (_) | |  | | (_| | |_| | |_| | (__
            /_/   \_\__,_|\__\___/|_|  |_|\__,_|\__,_|\__|_|\___|

                       Fully Automatic Mautic $MAUTIC_VERSION installer with SSL cert.



   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-----o----->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EOF
}

# This Bash script is a one-command Mautic installer for people capable of launching a VPS
# and running some basic commands in it but without the need for actual Linux Knowledge requirements.
#
# Intended uses:
# - A simple way to test Mautic with one single copy and paste command.
# - A live overview of Mautic requirements.
# - A starting point for Mautic code exploration and tinkering.
# - A way to learn about Bash Scripting.
#
# It is NOT meant as a production ready image.
#
# If you have any ideas how to make it clearer or simpler, please send me an email, submit a PR or an Issue.
# Also consider checking these other repos:
# KISSmauticDKR for a one-container, all-in-one Dockerfile, Docker Imagecontaining everything needed to run Mautic.
#
# While Ubuntu 24.04 is the only OS supported by this Script, you should be able to run it on other Debian-based distros.
#
# All the files for this dockerfile are on this GitHub repository:
# https://github.com/Martech-WorkShop/AutoMautic
#
#
#
#     This version of the script installs the following components:
#
#      - Apache 2.4 http web server
#      - PHP $PHP_VERSION FPM with all the required packages
#      - Maria DB $MARIADB_VERSION LTS
#      - Mautic $MAUTIC_VERSION
#      - Snap daemon
#      - Certbot
#
#      It will also install an SSL cert and configure your Apache2 web server to use this certificate.

# ---------------------------------------------------------------------
#                                 To Do List
# ---------------------------------------------------------------------

# ---------------------------------------------------------------------
#                                  Variables
# ---------------------------------------------------------------------

#  --------------------------   Versions   -------------------------
MAUTIC_VERSION="5.2.2"
PHP_VERSION="8.2"
PHP_VERSION_SHORT="82"
MARIADB_VERSION="11.4"
APACHE_VHOST_FILENAME="000-default.conf-8.3"

#  -------------   Hardware Requirements   ---------------
REQUIRED_DISK_SPACE=20 # in GB
REQUIRED_RAM=2 # in GB
REQUIRED_VCPUS=2

#  ------------------   System Variables   ----------------------
MAUTIC_DOMAIN=""
MYSQL_ROOT_PASSWORD="MariaDB_Default_Root_Password"  # Default, can be overridden
MYSQL_MAUTIC_USER="mautic_user"  # Dedicated user for Mautic
MYSQL_MAUTIC_PASSWORD=$(openssl rand -base64 32) # Generate secure password
MARIADB_DATABASE_NAME="mautic"
CERTBOT_EMAIL=""
MARKETING_EMAIL=""
MARKETING_EMAIL_OPT_IN=""
DOWNLOAD_URL_APACHE_VHOST="https://raw.githubusercontent.com/Martech-WorkShop/toolBelt/Prod/Mautic/conf/apache/000-default.conf-"
DOWNLOAD_URL_CRON_JOBS="https://files.mktg.dev/pub/AutoMautic/m9cronjobs.txt"
DOWNLOAD_URL_BASHRC="https://mauteam.org/AutoMautic/bashrc.txt"
DOWNLOAD_URL_HI5="https://mauteam.org/AutoMautic/hi5.txt"

#  ------------------   Colors Definitions   ----------------------
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

#  Mautic Form Webhook URL (REPLACE WITH YOUR ACTUAL URL)
MAUTIC_FORM_URL="https://your-mautic-domain.com/form/submit?formId=YOUR_FORM_ID"
LOG_FILE="/var/log/automautic_install.log"

# ---------------------------------------------------------------------
#                                 Interactive
# ---------------------------------------------------------------------

clear
banner
sleep 2
echo "\n\n         Welcome to the AutoMautic installer."
sleep 1
echo "\n\n\n         If you encounter any problems, or have any questions, comments or issues,"
echo "         drop by https://mauteam.org/ and tell us what's on your mind."
sleep 2
echo "\n\n\n         Let's start by updating all the existing packages in the system."
echo "\n\n\n    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-----o----->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo "\n\n"
sleep 1
apt update && apt upgrade -y
sleep 1
clear
banner
echo "\n\n"
echo "\n"
echo "\n\n         Now let's check if all the requirements are met..."
echo "\n\n"
echo "\n\n\n    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-----o----->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
sleep 2
echo "\n\n"
echo "\n\n         Are you root?"
[ `whoami` = root ] || exec su -c $0 root

sleep 1
echo "${GREEN}         Yes, you are root."
sleep 1
echo "\n\n${NC}         Is this Ubuntu 24.04?"
sleep 1
. /etc/lsb-release
. /etc/os-release
if [ "$ID" = "debian" ] && [ "$VERSION_ID" = "12" ]; then
     echo "${GREEN}         Yes, this is Debian 12 (Bookworm)."
 else:
     echo "${RED}         Only Debian 12 (Bookworm) is officially supported. You are running $PRETTY_NAME"
     echo "${RED}         You are not running a supported Linux Distro, chances are the install will just fail,"
     echo "${RED}         please consider getting a VPS with Debian 12 and starting the process again."
 fi
sleep 1
echo "\n\n${NC}         How much free disk space is available on your server?"
FREE_DISK="$(df --output=avail -m / | tail -1)"
GB_DISK=$((FREE_DISK/1000))
sleep 1
echo "         This installation requires a minimum of 20GB of free disk, 30GB or more recommended depending on usage."
sleep 1
echo "         Your server has "$GB_DISK "GB of disk drive available."
if [ $GB_DISK -ge 20 ]; then
    echo "${GREEN}         Yes, you have sufficient disk space available."
else:
    echo "${RED}         Your avalable disk space is too scarce, consider getting a larger server."
fi
sleep 1
echo "\n\n${NC}         How many threads or vCPUs does this server have?"
VCPUS=$(nproc)
sleep 1
echo "         This Mautic installation requires a minimum of 2 vCPUs, 3 or more recommended, depending on usage."
sleep 1
echo "         Your server has "$VCPUS "CPU threads available."
if [ $VCPUS -ge 2 ]; then
    echo "${GREEN}         Yes, you have enough vCPU threads available."
else:
    echo "${RED}         Your server does not have enough CPU threads available, consider getting a larger server."
fi
sleep 1
echo "\n\n${NC}         How much RAM does this server have?"
ALL_RAM=$(($(getconf _PHYS_PAGES) * $(getconf PAGE_SIZE) / (1024 * 1024000)))
FREE_RAM=$(($(getconf _AVPHYS_PAGES) * $(getconf PAGE_SIZE) / (1024 * 1024000)))
echo "         This Mautic installation requires a minimum of 2 GB of RAM, 4 or more recommended, depending on usage."
sleep 1
echo "         Your server has "$ALL_RAM"GB of RAM available."
sleep 1
echo "         Your server has "$FREE_RAM"GB of free RAM."
if [ $ALL_RAM -ge 2 ]; then
    echo "${GREEN}         Yes, you have enough RAM available."
else:
    echo "${RED}         Your server does not have enough RAM available, consider getting a larger server."
fi
sleep 1
echo "\n\n${NC}         Type here below the domain you have prepared for your new Mautic instance,"
echo "         Use the format mautic.yourdomain.com, press ENTER when you are done."
read -p "         https://" MAUTIC_DOMAIN
echo
echo "         Does your DNS A record point at the IP of this server?"
DIG_DOMAIN="$(dig +short $MAUTIC_DOMAIN)"
sleep 1
echo "         The DNS A record for" $MAUTIC_DOMAIN "points to the IP:"  $DIG_DOMAIN
sleep 1
LOCAL_IP="$(curl -s http://whatismyip.akamai.com/)"
# curl -s ipinfo.io | grep -Po 'ip[^0-9]*"\K[^"]*')"
echo "         This server's IP is: "$LOCAL_IP
sleep 1
if [ "$DIG_DOMAIN" = "$LOCAL_IP" ]; then
    echo "${GREEN}         Yes, the DNS A record for "$MAUTIC_DOMAIN "points to this server's IP."
else:
    echo "${RED}         This server's IP does NOT coincide with the IP reported by the DNS A record for domain "$MAUTIC_DOMAIN
    echo "${RED}         That mismatch, can prevent this script from creating and installing an SSL certificate."
    echo "${RED}         Some domains require an https conection in order to work, in that case, you won't be able to have"
    echo "${RED}         access to your Mautic install without a valid SSL certificate."
    echo "${RED}         I strongly recommend you to setup your DNS first, before trying to install Mautic with the AutoMautic script."
fi
sleep 1

# MariaDB Root Password Input
echo "\n\n${NC}         Now, let's set up the MariaDB root password."
echo "         You can either enter a custom password or let the script generate a strong one."
read -p "         Press ENTER to GENERATE a MariaDB root password, or type a custom password: " MYSQL_ROOT_PASSWORD
if [ -z "$MYSQL_ROOT_PASSWORD" ]; then
  MYSQL_ROOT_PASSWORD=$(openssl rand -base64 32)
  echo "${GREEN}         Generating a strong MariaDB root password.${NC}"
else:
  echo "${GREEN}         Using the custom MariaDB root password you provided.${NC}"
fi

# Certbot Email Input (with default "yes" for renewal notifications)
echo "\n\n${NC}         Do you want to be notified by Certbot about certificate renewals? (y/n, press ENTER for yes)"
read -p "         Choice: " CERTBOT_OPT_IN
if [[ -z "$CERTBOT_OPT_IN" || "$CERTBOT_OPT_IN" == "y" || "$CERTBOT_OPT_IN" == "Y" ]]; then
  CERTBOT_OPT_IN="yes"
  echo "\n\n${NC}         Please provide an email address for Let's Encrypt (Certbot) notifications:"
  read -p "         Certbot email: " CERTBOT_EMAIL
else:
  CERTBOT_OPT_IN="no"
  CERTBOT_EMAIL=""  # Ensure it's empty if they opt out
fi

# AutoMautic Notifications (separate opt-in, with option to re-use Certbot email)
echo "\n\n${NC}         Do you want to be notified about new AutoMautic versions and news? (y/n, press ENTER for yes)"
read -p "         Choice: " AMAUTIC_OPT_IN
if [[ -z "$AMAUTIC_OPT_IN" || "$AMAUTIC_OPT_IN" == "y" || "$AMAUTIC_OPT_IN" == "Y" ]]; then
  AMAUTIC_OPT_IN="yes"
  if [ -n "$CERTBOT_EMAIL" ]; then
    echo "\n\n${NC}         Please provide an email address for AutoMautic notifications:"
    read -p "         Press ENTER to use '$CERTBOT_EMAIL', or type a different email: " MARKETING_EMAIL
  else:
    echo "\n\n${NC}         Please provide an email address for AutoMautic notifications:"
    read -p "         Email: " MARKETING_EMAIL
  fi
  if [ -z "$MARKETING_EMAIL" ]; then
    MARKETING_EMAIL="$CERTBOT_EMAIL"
  fi
else:
  AMAUTIC_OPT_IN="no"
  MARKETING_EMAIL=""
fi
# Ask to save install details on a file.
echo "\n\n${NC}         Do you want to save your install details on a file? (y/n, press ENTER for yes)"
read -p "         Choice: " SAVE_DETAILS_OPT_IN
if [[ -z "$SAVE_DETAILS_OPT_IN" || "$SAVE_DETAILS_OPT_IN" == "y" || "$SAVE_DETAILS_OPT_IN" == "Y" ]]; then
  SAVE_DETAILS_OPT_IN="yes"
else:
  SAVE_DETAILS_OPT_IN="no"
fi

# User Consent (for sending data to *your* Mautic - simplified, based on previous choices)
# We'll only send data if they opted in for AutoMautic notifications.
if [ "$AMAUTIC_OPT_IN" = "yes" ]; then
  USER_CONSENT="yes"
else:
  USER_CONSENT="no"
fi

echo "\n\n${NC}    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-----o----->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo "\n\n\n         If all the requirements are met, shown in ${GREEN}green${NC}, press ENTER to continue with the installation."
echo "\n\n         If any of the requirements are not met, shown in ${RED}red${NC}, do not proceed with the setup,"
echo "         press CTRL + C to abort the installation process, fix the issue, and start over again."
echo "\n         A failed installation will likely prevent you from successfully running this script in the future."
echo "\n\n    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-----o----->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
read -p " " NOTHING
echo "\n\n         This script installs the following components:"
echo "\n          - Apache 2.4 http web server"
echo "          - PHP $PHP_VERSION FPM with all the required packages"
echo "          - Maria DB $MARIADB_VERSION LTS"
echo "          - Mautic $MAUTIC_VERSION"
echo "          - Snap daemon"
echo "          - Certbot"
echo "\n         It will also install an SSL cert and configure your Apache2 web server to use this certificate."
sleep 2
echo "\n\n         Proceeding with the installation..."
echo "\n\n"
sleep 1


# ---------------------------------------------------------------------
#                                 Installation
# ---------------------------------------------------------------------

### Install pre-requisites.

apt install software-properties-common -y

# NEW Debian 12-specific repository setup:

# Download the GPG key for the PHP repository.
wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg

# Add the PHP repository to the list of sources.
echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list

# Create a directory for APT keyrings.
mkdir -p /etc/apt/keyrings

# Download the MariaDB GPG key.
curl -o /etc/apt/keyrings/mariadb-keyring.pgp 'https://mariadb.org/mariadb_release_signing_key.pgp'

# Add the MariaDB repository to the list of sources.
echo "deb [signed-by=/etc/apt/keyrings/mariadb-keyring.pgp] \
    https://dlm.mariadb.com/repo/mariadb-server/$MARIADB_VERSION/repo/debian \
    $(lsb_release -sc) main" > /etc/apt/sources.list.d/mariadb.list

apt update && apt upgrade -y

### Install Packages.

apt install snapd apache2 mariadb-server curl ntp openssl unzip php-bcmath php-curl php-igbinary php-intl php-mbstring php-xml php"$PHP_VERSION" php"$PHP_VERSION"-imap php"$PHP_VERSION"-bcmath php"$PHP_VERSION"-bz2 php"$PHP_VERSION"-cli php"$PHP_VERSION"-common php"$PHP_VERSION"-curl php"$PHP_VERSION"-gd php"$PHP_VERSION"-gmp php"$PHP_VERSION"-igbinary php"$PHP_VERSION"-intl php"$PHP_VERSION"-mbstring php"$PHP_VERSION"-mysql php"$PHP_VERSION"-readline php"$PHP_VERSION"-phpdbg php"$PHP_VERSION"-xml php"$PHP_VERSION"-zip php"$PHP_VERSION"-soap php"$PHP_VERSION"-xmlrpc php"$PHP_VERSION"-tidy -y
a2enmod php"$PHP_VERSION" rewrite

# ---------------------------------------------------------------------
#                                  Functions
# ---------------------------------------------------------------------

# Execute MySQL commands, handling root authentication appropriately.
# Uses sudo mysql if no custom root password was provided, otherwise uses -u root -p.
mysql_exec() {
  local sql_command="$1"
  mariadb -u root -p"$MYSQL_ROOT_PASSWORD" -e "$sql_command"
}

### Get files from toolBelt.


wget "${DOWNLOAD_URL_APACHE_VHOST}${PHP_VERSION_SHORT}" -O /etc/apache2/sites-available/000-default.conf
wget "$DOWNLOAD_URL_CRON_JOBS" -O /tmp/cron-jobs.txt
crontab /tmp/cron-jobs.txt
rm /tmp/cron-jobs.txt


### Create database.

mysql_exec "CREATE DATABASE $MARIADB_DATABASE_NAME DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;"
mysql_exec "GRANT ALL ON $MARIADB_DATABASE_NAME.* TO '$MYSQL_MAUTIC_USER'@'localhost' IDENTIFIED BY '$MYSQL_MAUTIC_PASSWORD';"
mysql_exec "FLUSH PRIVILEGES;"

cd /var/www/html/


### Configure php.ini.
sed -i "s/memory_limit = 128M/memory_limit = 512M/" /etc/php/"$PHP_VERSION"/apache2/php.ini
sed -i "s/post_max_size = 8M/post_max_size = 32M/" /etc/php/"$PHP_VERSION"/apache2/php.ini
sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 32M/" /etc/php/"$PHP_VERSION"/apache2/php.ini
sed -i "s/max_execution_time = 30/max_execution_time = 60/" /etc/php/"$PHP_VERSION"/apache2/php.ini
sed -i "s/;date.timezone =/date.timezone = UTC/" /etc/php/"$PHP_VERSION"/apache2/php.ini
cp /etc/php/"$PHP_VERSION"/apache2/php.ini /etc/php/"$PHP_VERSION"/cli/php.ini
update-alternatives --set php /usr/bin/php"$PHP_VERSION"


### Install Mautic.
wget https://github.com/mautic/mautic/releases/download/"$MAUTIC_VERSION"/"$MAUTIC_VERSION".zip
unzip "$MAUTIC_VERSION".zip
rm "$MAUTIC_VERSION".zip

### Set permissions.
find /var/www/html -type d -exec chmod 755 -- {} +; find /var/www/html -type f -exec chmod 644 -- {} +; chown -R www-data:www-data /var/www/html

### Install Certbot and SSL Cert.
service apache2 restart
echo
snap install --classic certbot
certbot --apache -d "$MAUTIC_DOMAIN" --non-interactive --agree-tos --email "$CERTBOT_EMAIL"


### Finalizing Installation
service apache2 restart
sleep 2
echo "\n\n      Clearing the cache might take a minute or two, please be patient..."
echo "\n\n"
sudo -u www-data php /var/www/html/bin/console cache:clear
wget "$DOWNLOAD_URL_BASHRC" -O ~/.bashrc
wget "$DOWNLOAD_URL_HI5" -O /usr/local/bin/hi5

#  Function to send installation data to Mautic form
send_installation_data() {
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S %Z")
  local server_ip=$(curl -s http://whatismyip.akamai.com/)
  # ++ Generate a unique installation ID
  local installation_id=$(uuidgen)

  # Construct the data payload for the curl command.  Use --data-urlencode for proper encoding.
  local data="mauticform[mautic_version]=$MAUTIC_VERSION&mauticform[installed_domain]=$MAUTIC_DOMAIN&mauticform[server_ip]=$server_ip&mauticform[installation_timestamp]=$timestamp&mauticform[user_consent]=$USER_CONSENT&mauticform[installation_id]=$installation_id&mauticform[email]=$MARKETING_EMAIL&formId=YOUR_FORM_ID" #Remember to change this last field for the actual form id.

  # Send the data to the Mautic form using curl.
  curl -sSL -X POST -d "$data" "$MAUTIC_FORM_URL"

}
# ---------------------------------------------------------------------
#                                 Interactive
# ---------------------------------------------------------------------

bash hi5
sleep 3
clear
banner
echo "\n\n         Thank you for using the AutoMautic Installer, if you encountered any problems, have any questions,"
echo "         comments or issues, drop by https://mauteam.org/autoMautic/ and tell us what's on your mind."
sleep 2
echo "\n         Your Mautic installation is now completed, however you will have need to restart your server / VPS before"
echo "              you can proceed with the Mautic configuration wizard."
sleep 2
echo "         After rebooting the server, use your favorite web browser, and navigate to your Mautic subdomain to complete the setup:"
echo "         https://"$MAUTIC_DOMAIN
sleep 2
echo "\n         You will need the following data to complete the Mautic configuration wizard:"
echo "\n          > > > > >  MAKE A COPY OF THE FOLLOWING DATA SOMEWHERE, DO IT NOW!  < < < < <"
echo "\n         Database driver: MySQL PDO"
echo "         Database Host: localhost"
echo "         Database port: 3306"
echo "         DB name: $MARIADB_DATABASE_NAME"
echo "         Database Table Prefix: Leave empty"
echo "         Your MySQL database user is: $MYSQL_MAUTIC_USER"
echo "         Your MySQL User Password is: $MYSQL_MAUTIC_PASSWORD"
echo "         Backup existing tables: No"
sleep 2
echo "\n         If you need help with the installation wizard, the steps to complete the Mautic setup are explained here:"
echo "         https://mauteam.org/mautic/mautic-admins/mautic-installation-the-configuration-wizard/"
#  User Consent Prompt - simplified based on previous choices.
# Log the installation details to a file
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S %Z")
  local server_ip=$(curl -s http://whatismyip.akamai.com/)
  #  Generate a unique installation ID - we log this too
  local installation_id=$(uuidgen)
if [ "$SAVE_DETAILS_OPT_IN" = "yes" ]; then
  {
  echo "Mautic Version: $MAUTIC_VERSION"
  echo "Installed Domain: $MAUTIC_DOMAIN"
  echo "MariaDB User: $MYSQL_MAUTIC_USER"
  echo "MariaDB Password: $MYSQL_MAUTIC_PASSWORD"
  echo "MariaDB Database: $MARIADB_DATABASE_NAME"
  echo "Server IP: $server_ip"
  echo "Installation Timestamp: $timestamp"
  echo "Installation ID: $installation_id"
  echo "User Consent: $USER_CONSENT"
  } >> "$LOG_FILE"
   echo -e "\n         ${RED}IMPORTANT:${NC} Your install information has been saved on this server, on file:"
   echo -e "         ${GREEN}$LOG_FILE${NC}"
else:
  {
  echo "Mautic Version: $MAUTIC_VERSION"
  echo "Installed Domain: $MAUTIC_DOMAIN"
  echo "MariaDB User: $MYSQL_MAUTIC_USER"
  echo "MariaDB Password: $MYSQL_MAUTIC_PASSWORD"
  echo "MariaDB Database: $MARIADB_DATABASE_NAME"
  echo "Server IP: $server_ip"
  echo "Installation Timestamp: $timestamp"
  echo "Installation ID: $installation_id"
  echo "User Consent: $USER_CONSENT"
  } | tee /dev/tty

fi
if [ "$USER_CONSENT" = "yes" ]; then
    send_installation_data
    echo "${GREEN}         Installation data sent.  Thank you!${NC}"
else:
    echo "${RED}         Installation data will NOT be sent.${NC}"
fi
echo "\n\n    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-----o----->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"

echo "\n\n\n         We now have to reboot this server, after the reboot, you can start configuring your new Mautic instance."
echo "\n         When rebooting, your SSH connection will be closed (disconnected), your VPS will take some time to restart,"
echo "         wait a few minutes and you will be able to SSH into your server and log in to Mautic again."
echo "\n\n\n         Press CTRL + C if you do not wish to reboot the server now, but be aware a reboot is required."
echo "\n         Press ENTER when you are ready to reboot the server."
echo "\n\n         Enjoy!"
echo "\n    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-----o----->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo
echo
read -p " " NOTHING
reboot
