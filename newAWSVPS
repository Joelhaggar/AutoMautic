#!/bin/bash

# --- Configuration (Change these to your settings) ---
AWS_REGION="us-east-1"          # Example: us-east-1, eu-west-2, etc.
INSTANCE_TYPE="t2.micro"       # Example: t2.micro, t3.small, etc.
AMI_ID="ami-0c55b31ad2299a701"       # Replace with the AMI ID for your desired OS (e.g., Amazon Linux 2) in your region
KEY_NAME="your-key-pair-name"           # Replace with your EC2 key pair name
SECURITY_GROUP_IDS=("sg-0xxxxxxxxxxxxxxxxx")  # Replace with your security group ID(s) - at least one is required
SUBNET_ID="subnet-0xxxxxxxxxxxxxxxx"      # Replace with your subnet ID
USER_DATA_FILE=""          # Optional: Path to a file containing user data script
TAG_NAME="MyNewAWSInstance"      # Optional: Tag to assign to the instance

# --- Script (No changes needed below unless you want to customize further) ---

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
  echo "AWS CLI could not be found. Please install and configure it."
  exit 1
fi

# Get AWS credentials from environment variables if not explicitly set
: "${AWS_ACCESS_KEY_ID:=${AWS_ACCESS_KEY_ID}}"
: "${AWS_SECRET_ACCESS_KEY:=${AWS_SECRET_ACCESS_KEY}}"
: "${AWS_SESSION_TOKEN:=${AWS_SESSION_TOKEN}}"

# Function to get the instance ID from the tags
get_instance_id_by_tag() {
    local tag_name="$1"
    local instance_id=$(aws ec2 describe-instances \
        --region "$AWS_REGION" \
        --filters "Name=tag:Name,Values=$tag_name" \
        --query 'Reservations[*].Instances[*].InstanceId' \
        --output text
    )
    echo "$instance_id"
}

echo "Creating EC2 instance..."

# Prepare user data if provided
if [ -n "$USER_DATA_FILE" ] && [ -f "$USER_DATA_FILE" ]; then
  USER_DATA="--user-data file://$USER_DATA_FILE"
else
  USER_DATA=""
fi

# Construct the AWS CLI command to launch the instance
CREATE_INSTANCE_CMD="aws ec2 run-instances \
  --region $AWS_REGION \
  --image-id $AMI_ID \
  --count 1 \
  --instance-type $INSTANCE_TYPE \
  --key-name $KEY_NAME \
  --security-group-ids ${SECURITY_GROUP_IDS[*]} \
  --subnet-id $SUBNET_ID \
  $USER_DATA"

# Add tags if provided
if [ -n "$TAG_NAME" ]; then
  CREATE_INSTANCE_CMD+=" --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=$TAG_NAME}]'"
fi

# Execute the command and capture the output
response=$($CREATE_INSTANCE_CMD)

# Check for errors in the response
error_code=$(echo "$response" | jq -r '.RunInstancesResponse.Error.Code')
if [ -n "$error_code" ]; then
  error_message=$(echo "$response" | jq -r '.RunInstancesResponse.Error.Message')
  echo "Error creating instance:"
  echo "  Code: $error_code"
  echo "  Message: $error_message"
  exit 1
fi

# Extract the instance ID
instance_id=$(echo "$response" | jq -r '.Instances[0].InstanceId')
echo "Instance created with ID: $instance_id"

echo "Waiting for instance to become running..."

# Wait for the instance to be in the 'running' state
aws ec2 wait instance-running \
  --region "$AWS_REGION" \
  --instance-ids "$instance_id"

echo "Instance is running."

# Retrieve the public IP address if available
public_ip=$(aws ec2 describe-instances \
  --region "$AWS_REGION" \
  --instance-ids "$instance_id" \
  --query 'Reservations[*].Instances[*].PublicIpAddress' \
  --output text)

if [ -n "$public_ip" ]; then
  echo "Public IP address: $public_ip"
else
  echo "Public IP address not yet available."
fi

# Retrieve the private IP address
private_ip=$(aws ec2 describe-instances \
  --region "$AWS_REGION" \
  --instance-ids "$instance_id" \
  --query 'Reservations[*].Instances[*].PrivateIpAddress' \
  --output text)

echo "Private IP address: $private_ip"
